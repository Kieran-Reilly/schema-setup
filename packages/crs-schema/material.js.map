{"version":3,"file":"material.js","sources":["../src/html/providers/base-provider.js","../material/index.js","../material/providers/header.js","../material/providers/button.js"],"sourcesContent":["export class BaseProvider {\r\n    constructor(parser) {\r\n        this.parser = parser;\r\n    }\r\n\r\n    async dispose() {\r\n        delete this.parser;\r\n    }\r\n\r\n    /**\r\n     * This function will be called for each provider to do some validation checks if the item can be parsed\r\n     * @param item\r\n     */\r\n    async shouldParse(item) {\r\n        return true;\r\n    }\r\n    \r\n    async process(item) {\r\n        if (this.styles != null) {\r\n            item.styles = [];\r\n        }\r\n\r\n        const children = await this.parser.parseChildren(item);\r\n        const attributes = await this.parser.parseAttributes(item);\r\n        const styles = await this.parser.parseStyles(item);\r\n        const content = await this.parser.parseContent(item);\r\n\r\n        return {\r\n            children: children,\r\n            attributes: attributes,\r\n            styles: styles,\r\n            content: content\r\n        }\r\n    }\r\n\r\n    async setValues(str, obj) {\r\n        const keys = Object.keys(obj);\r\n        for (let key of keys) {\r\n            const value = obj[key] != null ? obj[key] : \"\";\r\n            str = str.split(key).join(value);\r\n        }\r\n        return str;\r\n    }\r\n\r\n    async validate(item, errors) {\r\n        if (item.elements != null) {\r\n            for (let element of item.elements) {\r\n                await this.parser.validateItem(element, errors);\r\n            }\r\n        }\r\n    }\r\n\r\n    async assert(callback, errors, message) {\r\n        const failed = (await callback()) == true;\r\n\r\n        if (failed) {\r\n            errors.push(message)\r\n        }\r\n\r\n        return !failed;\r\n    }\r\n}","import HeaderProvider from \"./providers/header.js\";\r\nimport ButtonProvider from \"./providers/button.js\";\r\n\r\nglobalThis.crs = self.crs || {};\r\nglobalThis.crs.material = {\r\n    HeaderProvider: HeaderProvider,\r\n    ButtonProvider: ButtonProvider\r\n};","import {BaseProvider} from \"./../../src/html/providers/base-provider.js\";\r\n\r\nexport default class HeaderProvider extends BaseProvider {\r\n    get key() {\r\n        return \"header\"\r\n    }\r\n\r\n    get template() {\r\n        return `\r\n            <header class=\"mdc-top-app-bar\">\r\n              <div class=\"mdc-top-app-bar__row\">\r\n                <section class=\"mdc-top-app-bar__section mdc-top-app-bar__section--align-start\">\r\n                  <button id=\"btnMenu\" class=\"material-icons mdc-top-app-bar__navigation-icon mdc-icon-button\">menu</button>\r\n                  <span class=\"mdc-top-app-bar__title\">__caption__</span>\r\n                </section>\r\n                <section class=\"mdc-top-app-bar__section mdc-top-app-bar__section--align-end\" role=\"toolbar\">\r\n                __actions__\r\n                </section>                \r\n              </div>\r\n            </header>        \r\n        `;\r\n    }\r\n\r\n    get buttonTemplate() {\r\n        return `<button id=\"__id__\" class=\"material-icons mdc-top-app-bar__action-item mdc-icon-button\" aria-label=\"__caption__\">__icon__</button>`\r\n    }\r\n\r\n    async _processButtons(item) {\r\n        if (item.buttons == null) return \"\";\r\n\r\n        const result = [];\r\n        item.buttons.forEach(button => result.push(\r\n            this.buttonTemplate\r\n                .split(\"__id__\").join(button.id)\r\n                .split(\"__caption__\").join(button.caption)\r\n                .split(\"__icon__\").join(button.icon))\r\n        );\r\n        return result.join(\"\");\r\n    }\r\n\r\n    async process(item) {\r\n        await this.parser.addStyleImports([\r\n            \"/node_modules/@material/top-app-bar/dist/mdc.top-app-bar.min.css\",\r\n            \"/node_modules/@material/icon-button/dist/mdc.icon-button.min.css\"\r\n        ]);\r\n\r\n        return await this.setValues(this.template, {\r\n            \"__caption__\": await this.parser.parseStringValue(item.caption),\r\n            \"__actions__\": await this._processButtons(item)\r\n        })\r\n    }\r\n}","import {BaseProvider} from \"./../../src/html/providers/base-provider.js\";\r\n\r\nexport default class ButtonProvider extends BaseProvider {\r\n    get key() {\r\n        return \"button\"\r\n    }\r\n\r\n    get template() {\r\n        return `<button __attributes__ __styles__>\r\n                    __icon__\r\n                    <span class=\"mdc-button__label\">__caption__</span>\r\n                </button>`;\r\n    }\r\n\r\n    get iconTemplate() {\r\n        return `<i class=\"material-icons mdc-button__icon\" aria-hidden=\"true\">__icon__</i>`\r\n    }\r\n\r\n    async process(item) {\r\n        const parts = await super.process(item);\r\n\r\n        if (parts.styles == null) {\r\n            parts.styles = 'class=\"mdc-button\"'\r\n        }\r\n        else {\r\n            parts.styles = parts.styles.split('=\"').join('=\"mdc-button ')\r\n        }\r\n\r\n        await this.parser.addStyleImports([\r\n            \"/node_modules/@material/button/dist/mdc.button.css\",\r\n        ]);\r\n\r\n        const icon = item.icon != null ? this.iconTemplate.split(\"__icon__\").join(item.icon) : \"\";\r\n\r\n        return await this.setValues(this.template, {\r\n            \"__icon__\": icon,\r\n            \"__caption__\": icon.caption,\r\n            \"__attributes__\": parts.attributes,\r\n            \"__styles__\": parts.styles\r\n        })\r\n    }\r\n}"],"names":["BaseProvider","[object Object]","parser","this","item","styles","children","parseChildren","attributes","parseAttributes","parseStyles","content","parseContent","str","obj","keys","Object","key","value","split","join","errors","elements","element","validateItem","callback","message","failed","push","crs","self","globalThis","material","HeaderProvider","template","buttonTemplate","buttons","result","forEach","button","id","caption","icon","addStyleImports","setValues","__caption__","parseStringValue","__actions__","_processButtons","ButtonProvider","iconTemplate","parts","super","process","__icon__","__attributes__","__styles__"],"mappings":"yBAAO,MAAMA,EACTC,YAAYC,GACRC,KAAKD,OAASA,EAGlBD,uBACWE,KAAKD,OAOhBD,kBAAkBG,GACd,OAAO,EAGXH,cAAcG,GAUV,OATmB,MAAfD,KAAKE,SACLD,EAAKC,OAAS,IAQX,CACHC,eANmBH,KAAKD,OAAOK,cAAcH,GAO7CI,iBANqBL,KAAKD,OAAOO,gBAAgBL,GAOjDC,aANiBF,KAAKD,OAAOQ,YAAYN,GAOzCO,cANkBR,KAAKD,OAAOU,aAAaR,IAUnDH,gBAAgBY,EAAKC,GACjB,MAAMC,EAAOC,OAAOD,KAAKD,GACzB,IAAK,IAAIG,KAAOF,EAAM,CAClB,MAAMG,EAAoB,MAAZJ,EAAIG,GAAeH,EAAIG,GAAO,GAC5CJ,EAAMA,EAAIM,MAAMF,GAAKG,KAAKF,GAE9B,OAAOL,EAGXZ,eAAeG,EAAMiB,GACjB,GAAqB,MAAjBjB,EAAKkB,SACL,IAAK,IAAIC,KAAWnB,EAAKkB,eACfnB,KAAKD,OAAOsB,aAAaD,EAASF,GAKpDpB,aAAawB,EAAUJ,EAAQK,GAC3B,MAAMC,EAA+B,SAAfF,IAMtB,OAJIE,GACAN,EAAOO,KAAKF,IAGRC,cCxDLE,IAAMC,KAAKD,KAAO,GAC7BE,WAAWF,IAAIG,SAAW,CACtBC,eCHW,cAA6BjC,EACxCiB,UACI,MAAO,SAGXiB,eACI,MAAO,iqBAeXC,qBACI,MAAO,qIAGXlC,sBAAsBG,GAClB,GAAoB,MAAhBA,EAAKgC,QAAiB,MAAO,GAEjC,MAAMC,EAAS,GAOf,OANAjC,EAAKgC,QAAQE,QAAQC,GAAUF,EAAOT,KAClCzB,KAAKgC,eACAhB,MAAM,UAAUC,KAAKmB,EAAOC,IAC5BrB,MAAM,eAAeC,KAAKmB,EAAOE,SACjCtB,MAAM,YAAYC,KAAKmB,EAAOG,QAEhCL,EAAOjB,KAAK,IAGvBnB,cAAcG,GAMV,aALMD,KAAKD,OAAOyC,gBAAgB,CAC9B,mEACA,2EAGSxC,KAAKyC,UAAUzC,KAAK+B,SAAU,CACvCW,kBAAqB1C,KAAKD,OAAO4C,iBAAiB1C,EAAKqC,SACvDM,kBAAqB5C,KAAK6C,gBAAgB5C,OD1ClD6C,eEJW,cAA6BjD,EACxCiB,UACI,MAAO,SAGXiB,eACI,MAAO,sKAMXgB,mBACI,MAAO,6EAGXjD,cAAcG,GACV,MAAM+C,QAAcC,MAAMC,QAAQjD,GAEd,MAAhB+C,EAAM9C,OACN8C,EAAM9C,OAAS,qBAGf8C,EAAM9C,OAAS8C,EAAM9C,OAAOc,MAAM,MAAMC,KAAK,uBAG3CjB,KAAKD,OAAOyC,gBAAgB,CAC9B,uDAGJ,MAAMD,EAAoB,MAAbtC,EAAKsC,KAAevC,KAAK+C,aAAa/B,MAAM,YAAYC,KAAKhB,EAAKsC,MAAQ,GAEvF,aAAavC,KAAKyC,UAAUzC,KAAK+B,SAAU,CACvCoB,SAAYZ,EACZG,YAAeH,EAAKD,QACpBc,eAAkBJ,EAAM3C,WACxBgD,WAAcL,EAAM9C"}