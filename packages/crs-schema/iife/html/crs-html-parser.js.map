{"version":3,"file":"crs-html-parser.js","sources":["../../../src/html/managers/base-manager.js","../../../src/html/managers/templates.js","../../../src/html/managers/variables.js","../../../src/html/providers/base-provider.js","../../../src/html/providers/body.js","../../../src/html/providers/raw.js","../../../src/html/providers/template.js","../../../src/common-templates.js","../../../src/html/providers/button.js","../../../src/html/html-parser.js","../../../src/html/html-base-parser.js","../../../src/base-parser.js"],"sourcesContent":["export class BaseManager {\r\n    constructor(parser) {\r\n        this.parser = parser;\r\n        this.isManager = true;\r\n    }\r\n    \r\n    async dispose() {\r\n        await this.reset();\r\n        delete this.parser;\r\n    }\r\n\r\n    async assert(callback, errors, message) {\r\n        const failed = callback() == true;\r\n\r\n        if (failed) {\r\n            errors.push(message)\r\n        }\r\n\r\n        return !failed;\r\n    }\r\n\r\n    async validate(item, errors) {\r\n        if (item.elements != null) {\r\n            for (let element of item.elements) {\r\n                await this.parser.validateItem(element, errors);\r\n            }\r\n        }\r\n    }\r\n\r\n    async reset() {\r\n        // override to clear\r\n    }\r\n}","import {BaseManager} from \"./base-manager.js\";\r\n\r\nexport default class TemplatesManager extends BaseManager {\r\n    get key() {\r\n        return \"templates\"\r\n    }\r\n\r\n    async reset() {\r\n        for (let part of this._parts || []) {\r\n            if (this[part] != null) {\r\n                this[part].clear();\r\n                this[part] = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    async initialize() {\r\n        this._parts = [];\r\n        await this._load(\"templates\");\r\n    }\r\n\r\n    async _load(name) {\r\n        if (this[name] == null) {\r\n            this[name] = new Map();\r\n            this._parts.push(name);\r\n        }\r\n\r\n        const templates = this.parser.schema[name];\r\n        for (let template of templates) {\r\n            if (template.import == null) {\r\n                this[name].set(template.id, template);\r\n            }\r\n            else {\r\n                await this._load(template.import);\r\n            }\r\n        }\r\n    }\r\n\r\n    async getTemplate(store, id) {\r\n        if(this[store].has(id) == false) throw new Error(`There is no template in the schema for with id \"${id}\"`);\r\n        return this[store].get(id);\r\n    }\r\n\r\n    async validate(templates, errors) {\r\n        if (await this.assert(() => Array.isArray(templates) == false, errors, \"templates definition must be a array\")) {\r\n            await this.initialize(templates);\r\n            for (const item of this.templates) {\r\n                await this.assert(() => item.id == null, errors, \"template must have a valid id property\");\r\n                await this.assert(() => item.elements == null, errors, \"template must have a elements property\");\r\n                await this.assert(() => Array.isArray(item.elements) != true, errors, \"template elements property should be an array\");\r\n                if (await this.assert(() => (item.elements || []).length == 0, errors, \"template elements must contain content\")) {\r\n                    await super.validate(item, errors);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import {BaseManager} from \"./base-manager.js\";\r\n\r\nexport async function getValueOnPath(object, path) {\r\n    let obj = object;\r\n    if (path.indexOf(\".\") == -1) {\r\n        return obj[path];\r\n    }\r\n\r\n    const parts = path.split(\".\");\r\n    for (let i = 0; i < parts.length -1; i++) {\r\n        const part = parts[i];\r\n        obj = obj[part];\r\n        if (obj == null) return null;\r\n    }\r\n    return obj[parts[parts.length -1]];\r\n}\r\n\r\nexport default class VariablesManager extends BaseManager {\r\n    get key() {\r\n        return \"variables\"\r\n    }\r\n\r\n    get valueProcessor() {\r\n        return true;\r\n    }\r\n\r\n    async reset() {\r\n        delete this.variables;\r\n    }\r\n\r\n    async initialize(variables) {\r\n        this.variables = variables;\r\n    }\r\n\r\n    async process(value) {\r\n        return this.getValue(value);\r\n    }\r\n\r\n    async getValue(value) {\r\n        if (typeof value != \"string\" || value.trim()[0] != \"@\") return value;\r\n        return getValueOnPath(this.variables, value.slice(1));\r\n    }\r\n}","export class BaseProvider {\r\n    constructor(parser) {\r\n        this.parser = parser;\r\n    }\r\n\r\n    async dispose() {\r\n        delete this.parser;\r\n    }\r\n\r\n    /**\r\n     * This function will be called for each provider to do some validation checks if the item can be parsed\r\n     * @param item\r\n     */\r\n    async shouldParse(item) {\r\n        return true;\r\n    }\r\n    \r\n    async process(item) {\r\n        if (this.styles != null) {\r\n            item.styles = [];\r\n        }\r\n\r\n        const children = await this.parser.parseChildren(item);\r\n        const attributes = await this.parser.parseAttributes(item);\r\n        const styles = await this.parser.parseStyles(item);\r\n        const content = await this.parser.parseContent(item);\r\n\r\n        return {\r\n            children: children,\r\n            attributes: attributes,\r\n            styles: styles,\r\n            content: content\r\n        }\r\n    }\r\n\r\n    async setValues(str, obj) {\r\n        const keys = Object.keys(obj);\r\n        for (let key of keys) {\r\n            const value = obj[key] != null ? obj[key] : \"\";\r\n            str = str.split(key).join(value);\r\n        }\r\n        return str;\r\n    }\r\n\r\n    async validate(item, errors) {\r\n        if (item.elements != null) {\r\n            for (let element of item.elements) {\r\n                await this.parser.validateItem(element, errors);\r\n            }\r\n        }\r\n    }\r\n\r\n    async assert(callback, errors, message) {\r\n        const failed = (await callback()) == true;\r\n\r\n        if (failed) {\r\n            errors.push(message)\r\n        }\r\n\r\n        return !failed;\r\n    }\r\n}","import {BaseProvider} from \"./base-provider.js\";\r\n\r\nexport default class BodyProvider extends BaseProvider {\r\n    get key() {\r\n        return \"body\"\r\n    }\r\n\r\n    get template() {\r\n        return `__content__`\r\n    }\r\n\r\n    async process(item) {\r\n        const parts = await super.process(item);\r\n\r\n        return await this.setValues(this.template, {\r\n            \"__content__\": parts.children\r\n        })\r\n    }\r\n\r\n    async validate(item, errors) {\r\n        await this.assert(() => Array.isArray(item), errors, \"Body element must be a object not an array\");\r\n        await this.assert(() => item.elements == null, errors, \"elements property required on body\");\r\n        await this.assert(() => Array.isArray(item.elements) == false, errors, \"element property on body must be an array\");\r\n\r\n        await super.validate(item, errors);\r\n    }\r\n}","import {BaseProvider} from \"./base-provider.js\";\r\n\r\nexport default class RawProvider extends BaseProvider {\r\n    get key() {\r\n        return \"raw\"\r\n    }\r\n\r\n    get template() {\r\n        return `<__element__ __attributes__ __styles__>__content__</__element__>`\r\n    }\r\n\r\n    async process(item, key) {\r\n        const parts = await super.process(item);\r\n\r\n        return await this.setValues(this.template, {\r\n            \"__element__\": key,\r\n            \"__attributes__\": parts.attributes,\r\n            \"__styles__\": parts.styles,\r\n            \"__content__\": parts.children || parts.content || \"\"\r\n        })\r\n    }\r\n\r\n    async validate(item, errors) {\r\n        await super.validate(item, errors);\r\n    }\r\n}","import {BaseProvider} from \"./base-provider.js\";\r\n\r\nexport default class TemplateProvider extends BaseProvider {\r\n    get key() {\r\n        return \"template\"\r\n    }\r\n\r\n    get template() {\r\n        return `<div __attributes__ __classes__ >\r\n                    __content__\r\n                </div>`;\r\n    }\r\n\r\n    async process(item, key) {\r\n        const manager = this.parser.managers.get(\"templates\");\r\n        if (manager == null) throw new Error(\"templates manager should be registered\");\r\n\r\n        let store =  Object.getOwnPropertyNames(item).find(p=>p.toLowerCase().indexOf(\"template\") !== -1);\r\n        const id = item[store];\r\n\r\n        if (store == \"template\") {\r\n            store = \"templates\";\r\n        }\r\n\r\n        const template = await manager.getTemplate(store, id); // NOTE GM: Hardcoded to templates till above comment resolved.\r\n        item.elements = template.elements;\r\n        const parts = await super.process(item);\r\n\r\n        return await this.setValues(this.template,\r\n            {\r\n                \"__attributes__\": parts.attributes,\r\n                \"__classes__\": parts.styles,\r\n                \"__content__\": parts.children});\r\n    }\r\n\r\n    async processTemplate(template) {\r\n        const parts = await super.process(template);\r\n        return parts.children;\r\n    }\r\n\r\n    async validate(item, errors) {\r\n        await this.assert(() => item.template == null, errors, \"template element must have a valid template property\");\r\n    }\r\n}","export const svgLink = `<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\"><use xlink:href=\"#__icon__\"/></svg>`;\r\n\r\n\r\n\r\n\r\n\r\n","import {BaseProvider} from \"./base-provider.js\";\r\nimport {svgLink} from \"./../../common-templates.js\";\r\n\r\nexport default class ButtonProvider extends BaseProvider {\r\n    get key() {\r\n        return \"button\"\r\n    }\r\n\r\n    get template() {\r\n        return `<button __attributes__ __styles__>__content__</button>`\r\n    }\r\n\r\n    async process(item, key) {\r\n        const parts = await super.process(item);\r\n        const caption = await this.parser.parseStringValue(item.caption);\r\n        const icon = item.icon == null ? \"\" : svgLink.split(\"__icon__\").join(item.icon);\r\n        const content = item.icon == null ? `<span>${caption}</span>` : `${icon}<span>${caption}</span>`;\r\n\r\n        return await this.setValues(this.template, {\r\n            \"__attributes__\": parts.attributes,\r\n            \"__styles__\": parts.styles,\r\n            \"__content__\": content\r\n        })\r\n    }\r\n\r\n    validate(item, errors) {\r\n        this.assert(() => item.caption == null, errors, \"button must have a caption\");\r\n    }\r\n}","import {HTMLBaseParser} from \"./html-base-parser.js\";\r\n\r\nexport class HTMLParser extends HTMLBaseParser {\r\n    async addStyleImports(imports) {\r\n        if (Array.isArray(imports)) {\r\n            imports.forEach(imp => this.styleImports.push(imp));\r\n        }\r\n        else\r\n        {\r\n            this.styleImports.push(imports);\r\n        }\r\n    }\r\n\r\n    async parse(schema) {\r\n        this.schema = schema;\r\n\r\n        await this.init();\r\n\r\n        if (this.providers.has(this.options.root) == false) {\r\n            throw new Error(`schema requires a \"${this.options.root}\" option`);\r\n        }\r\n\r\n        const root = schema[this.options.root];\r\n        if (root == null) throw new Error(`schema should have a property \"${this.options.root}\"`);\r\n\r\n        let result = await this.providers.get(this.options.root).process(root);\r\n        result = await this.processStyleImports(result);\r\n\r\n        for (const managerKey of this.managers.keys()) {\r\n            const manager = this.managers.get(managerKey);\r\n            await manager.reset();\r\n        }\r\n\r\n        delete this.schema;\r\n\r\n        return result;\r\n    }\r\n\r\n    async validate(schema, errors) {\r\n        const rootProvider = this.providers.get(this.options.root);\r\n        if (rootProvider == null) {\r\n            errors.push(\"a root provider was not registered\");\r\n        }\r\n\r\n        const keys = Object.keys(schema);\r\n\r\n        for (let key of keys) {\r\n            if (key != this.options.root) {\r\n                if (this.managers.has(key)) {\r\n                    const manager = this.managers.get(key);\r\n                    if (manager.validate != null) {\r\n                        manager.validate(schema[key], errors);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const root = schema[this.options.root];\r\n        rootProvider && rootProvider.validate(root, errors);\r\n    }\r\n\r\n    async validateItem(item, errors) {\r\n        const key = item[\"element\"];\r\n        let provider = this.providers.get(key);\r\n\r\n        if (provider == null) {\r\n            provider = this.providers.get(\"raw\");\r\n        }\r\n\r\n        provider.validate && provider.validate(item, errors);\r\n    }\r\n}\r\n\r\nif (typeof self != \"undefined\") {\r\n    self.crs = self.crs || {};\r\n    self.crs.HTMLParser = HTMLParser;\r\n}\r\n","import {BaseParser} from \"./../base-parser.js\";\r\nimport TemplatesManager from \"./managers/templates.js\";\r\nimport VariablesManager from \"./managers/variables.js\";\r\nimport BodyProvider from \"./providers/body.js\";\r\nimport RawProvider from \"./providers/raw.js\";\r\nimport TemplateProvider from \"./providers/template.js\";\r\nimport ButtonProvider from \"./providers/button.js\";\r\n\r\nexport class HTMLBaseParser extends BaseParser {\r\n    constructor(attributes) {\r\n        super(attributes);\r\n        this.styleImports = [];\r\n\r\n        this.options = {\r\n            elementKey: \"element\",\r\n            childrenKey: \"elements\",\r\n            attributesKey: \"attributes\",\r\n            stylesKey: \"styles\",\r\n            root: \"body\",\r\n            contentKey: \"content\"\r\n        };\r\n    }\r\n\r\n    async dispose() {\r\n        await super.dispose();\r\n        this.styleImports.length = 0;\r\n        this.options = null;\r\n    }\r\n\r\n    async initialize() {\r\n        await this.register(TemplatesManager);\r\n        await this.register(VariablesManager);\r\n        await this.register(BodyProvider);\r\n        await this.register(RawProvider);\r\n        await this.register(TemplateProvider);\r\n        await this.register(ButtonProvider);\r\n    }\r\n\r\n    async parseItem(item, key) {\r\n        if(item == null) return;\r\n        key = key || item[this.options.elementKey];\r\n        if (this.providers.has(key)) {\r\n            const provider = this.providers.get(key);\r\n            if(await provider.shouldParse(item) !== false) {\r\n                return provider.process(item);\r\n            }\r\n        }\r\n        else {\r\n            const provider = this.providers.get(\"raw\");\r\n            if(provider.shouldParse(item) !== false) {\r\n                return provider.process(item, key);\r\n            }\r\n        }\r\n    }\r\n\r\n    async parseAttributes(item) {\r\n        const attributes = item[this.options.attributesKey];\r\n        if (attributes == null) return null;\r\n\r\n        const result = [];\r\n        for (const values of Object.entries(attributes)) {\r\n            const key = values[0];\r\n            let value = values[1];\r\n\r\n            value = await this.parseStringValue(value, key);\r\n\r\n            result.push(`${key}=\"${value}\"`);\r\n        }\r\n\r\n        return result.join(\" \");\r\n    }\r\n\r\n    async parseStyles(item) {\r\n        let styles = item[this.options.stylesKey];\r\n        if (styles == null) return null;\r\n\r\n        if (Array.isArray(styles)) {\r\n            styles = styles.join(\" \");\r\n        }\r\n\r\n        return `class=\"${styles}\"`;\r\n    }\r\n\r\n    async parseChildren(item) {\r\n        const children = item[this.options.childrenKey];\r\n        if (children == null) return null;\r\n\r\n        const result = [];\r\n        for (let child of children) {\r\n            result.push(await this.parseItem(child));\r\n        }\r\n        return result.join(\"\");\r\n    }\r\n\r\n    async parseContent(item) {\r\n        let content = item[this.options.contentKey];\r\n        if (content == null) return null;\r\n\r\n        return this.parseStringValue(content);\r\n    }\r\n\r\n    async parseStringValue(str, key) {\r\n        for (let processor of this.valueProcessors) {\r\n            str = await processor.process(str, key);\r\n        }\r\n        return str;\r\n    }\r\n}","export class BaseParser {\r\n    constructor(attributes) {\r\n        this.attributes = attributes;\r\n        this.styleImports = [];\r\n        this.providers = new Map();\r\n        this.managers = new Map();\r\n\r\n        this.valueProcessors = [];\r\n    }\r\n\r\n    async dispose() {\r\n        for (let provider of this.providers.keys()) {\r\n            await this.providers.get(provider).dispose();\r\n        }\r\n\r\n        for (let manager of this.managers.keys()) {\r\n            await this.managers.get(manager).dispose();\r\n        }\r\n\r\n        await this.providers.clear();\r\n        await this.managers.clear();\r\n\r\n        delete this.providers;\r\n        delete this.managers;\r\n        delete this.attributes;\r\n\r\n        this.valueProcessors.length = 0;\r\n        this.options = 0;\r\n    }\r\n\r\n    async register(type) {\r\n        const instance = new type(this);\r\n\r\n        if (instance.isManager == true) {\r\n            this.managers.set(instance.key, instance);\r\n            if (instance.valueProcessor == true) {\r\n                this.valueProcessors.push(instance);\r\n            }\r\n        }\r\n        else {\r\n            this.providers.set(instance.key, instance);\r\n        }\r\n    }\r\n\r\n    async load(libraries) {\r\n        for (let library of libraries || []) {\r\n            await this.register((await import(library)).default);\r\n        }\r\n    }\r\n\r\n    async init() {\r\n        for (const value of this.managers) {\r\n            value.reset && await value.reset();\r\n        }\r\n\r\n        const keys = Object.keys(this.schema);\r\n\r\n        for (let key of keys) {\r\n            if (key != this.options.root) {\r\n                if (this.managers.has(key)) {\r\n                    await this.managers.get(key).initialize(this.schema[key]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    async processStyleImports(result) {\r\n        if (this.styleImports.length > 0) {\r\n            const imports = [];\r\n            this.styleImports.forEach(style => imports.push(`@import \"${style}\";`));\r\n\r\n            result = `<style>${imports.join(\"\\n\")};</style>${result}`;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    async validate() {\r\n        return;\r\n    }\r\n}"],"names":["BaseManager","[object Object]","parser","this","isManager","reset","callback","errors","message","failed","push","item","elements","element","validateItem","TemplatesManager","key","part","_parts","clear","_load","name","Map","templates","schema","template","import","set","id","store","has","Error","get","assert","Array","isArray","initialize","length","super","validate","VariablesManager","valueProcessor","variables","value","getValue","trim","async","object","path","obj","indexOf","parts","split","i","getValueOnPath","slice","BaseProvider","styles","children","parseChildren","attributes","parseAttributes","parseStyles","content","parseContent","str","keys","Object","join","BodyProvider","process","setValues","__content__","RawProvider","__element__","__attributes__","__styles__","TemplateProvider","manager","managers","getOwnPropertyNames","find","p","toLowerCase","getTemplate","__classes__","svgLink","ButtonProvider","caption","parseStringValue","icon","HTMLParser","styleImports","providers","valueProcessors","provider","dispose","options","type","instance","libraries","library","register","default","root","result","imports","forEach","style","elementKey","childrenKey","attributesKey","stylesKey","contentKey","shouldParse","values","entries","child","parseItem","processor","imp","init","processStyleImports","managerKey","rootProvider","self","crs"],"mappings":"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"}