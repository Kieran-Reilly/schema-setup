{"version":3,"file":"base-parser.js","sources":["../../src/base-parser.js"],"sourcesContent":["export class BaseParser {\r\n    constructor(attributes) {\r\n        this.attributes = attributes;\r\n        this.styleImports = [];\r\n        this.providers = new Map();\r\n        this.managers = new Map();\r\n\r\n        this.valueProcessors = [];\r\n    }\r\n\r\n    async dispose() {\r\n        for (let provider of this.providers.keys()) {\r\n            await this.providers.get(provider).dispose();\r\n        }\r\n\r\n        for (let manager of this.managers.keys()) {\r\n            await this.managers.get(manager).dispose();\r\n        }\r\n\r\n        await this.providers.clear();\r\n        await this.managers.clear();\r\n\r\n        delete this.providers;\r\n        delete this.managers;\r\n        delete this.attributes;\r\n\r\n        this.valueProcessors.length = 0;\r\n        this.options = 0;\r\n    }\r\n\r\n    async register(type) {\r\n        const instance = new type(this);\r\n\r\n        if (instance.isManager == true) {\r\n            this.managers.set(instance.key, instance);\r\n            if (instance.valueProcessor == true) {\r\n                this.valueProcessors.push(instance);\r\n            }\r\n        }\r\n        else {\r\n            this.providers.set(instance.key, instance);\r\n        }\r\n    }\r\n\r\n    async load(libraries) {\r\n        for (let library of libraries || []) {\r\n            await this.register((await import(library)).default);\r\n        }\r\n    }\r\n\r\n    async init() {\r\n        for (const value of this.managers) {\r\n            value.reset && await value.reset();\r\n        }\r\n\r\n        const keys = Object.keys(this.schema);\r\n\r\n        for (let key of keys) {\r\n            if (key != this.options.root) {\r\n                if (this.managers.has(key)) {\r\n                    await this.managers.get(key).initialize(this.schema[key]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    async processStyleImports(result) {\r\n        if (this.styleImports.length > 0) {\r\n            const imports = [];\r\n            this.styleImports.forEach(style => imports.push(`@import \"${style}\";`));\r\n\r\n            result = `<style>${imports.join(\"\\n\")};</style>${result}`;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    async validate() {\r\n        return;\r\n    }\r\n}"],"names":["BaseParser","[object Object]","attributes","this","styleImports","providers","Map","managers","valueProcessors","provider","keys","get","dispose","manager","clear","length","options","type","instance","isManager","set","key","valueProcessor","push","libraries","library","register","import","default","value","reset","Object","schema","root","has","initialize","result","imports","forEach","style","join"],"mappings":"AAAO,MAAMA,EACTC,YAAYC,GACRC,KAAKD,WAAaA,EAClBC,KAAKC,aAAe,GACpBD,KAAKE,UAAY,IAAIC,IACrBH,KAAKI,SAAW,IAAID,IAEpBH,KAAKK,gBAAkB,GAG3BP,gBACI,IAAK,IAAIQ,KAAYN,KAAKE,UAAUK,aAC1BP,KAAKE,UAAUM,IAAIF,GAAUG,UAGvC,IAAK,IAAIC,KAAWV,KAAKI,SAASG,aACxBP,KAAKI,SAASI,IAAIE,GAASD,gBAG/BT,KAAKE,UAAUS,cACfX,KAAKI,SAASO,eAEbX,KAAKE,iBACLF,KAAKI,gBACLJ,KAAKD,WAEZC,KAAKK,gBAAgBO,OAAS,EAC9BZ,KAAKa,QAAU,EAGnBf,eAAegB,GACX,MAAMC,EAAW,IAAID,EAAKd,MAEA,GAAtBe,EAASC,WACThB,KAAKI,SAASa,IAAIF,EAASG,IAAKH,GACD,GAA3BA,EAASI,gBACTnB,KAAKK,gBAAgBe,KAAKL,IAI9Bf,KAAKE,UAAUe,IAAIF,EAASG,IAAKH,GAIzCjB,WAAWuB,GACP,IAAK,IAAIC,KAAWD,GAAa,SACvBrB,KAAKuB,gBAAgBC,OAAOF,IAAUG,SAIpD3B,aACI,IAAK,MAAM4B,KAAS1B,KAAKI,SACrBsB,EAAMC,aAAeD,EAAMC,QAG/B,MAAMpB,EAAOqB,OAAOrB,KAAKP,KAAK6B,QAE9B,IAAK,IAAIX,KAAOX,EACRW,GAAOlB,KAAKa,QAAQiB,MAChB9B,KAAKI,SAAS2B,IAAIb,UACZlB,KAAKI,SAASI,IAAIU,GAAKc,WAAWhC,KAAK6B,OAAOX,IAMpEpB,0BAA0BmC,GACtB,GAAIjC,KAAKC,aAAaW,OAAS,EAAG,CAC9B,MAAMsB,EAAU,GAChBlC,KAAKC,aAAakC,QAAQC,GAASF,EAAQd,KAAK,YAAYgB,QAE5DH,EAAS,UAAUC,EAAQG,KAAK,iBAAiBJ,IAErD,OAAOA,EAGXnC"}